version: "3.8"

services:
  frontend:
    build:
      context: ./frontend
    container_name: frontend
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    depends_on:
      - backendgo
      - backend
    networks:
      - productnetwork
    env_file:
      - .env
    restart: always

  backendgo:
    build:
      context: ./backendgo
    container_name: backendgo
    ports:
      - "${GO_PORT}:${GO_PORT}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DOCKER_HOST
    networks:
      - productnetwork
    restart: always

  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    container_name: backend
    ports:
      - "${ASP_PORT}:${ASP_PORT}"
    environment:
      - ASPNETCORE_ENVIRONMENT
      - ASPNETCORE_URLS
      - Redis__ConnectionString
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=bazac;User=sa;Password=${SA_PASSWORD};TrustServerCertificate=True
    depends_on:
      - redis
      - sqlserver
    networks:
      - productnetwork
    restart: on-failure
  redis:
    image: redis:alpine
    container_name: redis
    mem_limit: 512m 
    cpu_shares: 512
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    networks:
      - productnetwork

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    ports:
      - "${SQL_PORT}:${SQL_PORT}"
    environment:
      SA_PASSWORD: "${SA_PASSWORD}"
      ACCEPT_EULA: "${ACCEPT_EULA}"
    networks:
      - productnetwork
    volumes:
      - sqlvolume:/var/opt/mssql
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S sqlserver -U SA -P ${SA_PASSWORD} -Q 'SELECT 1'"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always

networks:
  productnetwork:
    driver: bridge

volumes:
  sqlvolume:
